
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000b00  00000b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800140  00800140  00000bd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c4  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f35  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000144b  00000000  00000000  000033b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00004804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008f66  00000000  00000000  00004a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000866  00000000  00000000  0000d9fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000e260  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002f19  00000000  00000000  0000e330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	0b c2       	rjmp	.+1046   	; 0x48c <__vector_29>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 e0       	ldi	r30, 0x00	; 0
  c0:	fb e0       	ldi	r31, 0x0B	; 11
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 34       	cpi	r26, 0x40	; 64
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a0 e4       	ldi	r26, 0x40	; 64
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a9 35       	cpi	r26, 0x59	; 89
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	54 d0       	rcall	.+168    	; 0x188 <main>
  e0:	0d c5       	rjmp	.+2586   	; 0xafc <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
  fc:	08 95       	ret

000000fe <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24
 116:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do?
 118:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 11a:	89 f7       	brne	.-30     	; 0xfe <delay_micros>
	RET
 11c:	08 95       	ret

0000011e <delay_ms>:
;==============================================================================
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
delay_ms:
	MOV R18, R24
 11e:	28 2f       	mov	r18, r24

00000120 <loop_dms>:
loop_dms:
	LDI R24, 250
 120:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 122:	ed df       	rcall	.-38     	; 0xfe <delay_micros>
	LDI R24, 250
 124:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 126:	eb df       	rcall	.-42     	; 0xfe <delay_micros>
	LDI R24, 250
 128:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 12a:	e9 df       	rcall	.-46     	; 0xfe <delay_micros>
	LDI R24, 250
 12c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 12e:	e7 df       	rcall	.-50     	; 0xfe <delay_micros>
	DEC R18
 130:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 132:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 134:	a9 f7       	brne	.-22     	; 0x120 <loop_dms>
	RET
 136:	08 95       	ret

00000138 <delay_1_s>:

delay_1_s:
	LDI R24, 250
 138:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 13a:	f1 df       	rcall	.-30     	; 0x11e <delay_ms>
	LDI R24, 250
 13c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 13e:	ef df       	rcall	.-34     	; 0x11e <delay_ms>
	LDI R24, 250
 140:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 142:	ed df       	rcall	.-38     	; 0x11e <delay_ms>
	LDI R24, 250
 144:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms		;	continue!
 146:	eb cf       	rjmp	.-42     	; 0x11e <delay_ms>
	RET
 148:	08 95       	ret

0000014a <hmi_init>:
		// convert number!
		str_to_uint16(numbers, length, p_int_nr);
	}
	// return the number of digits
	return length;
}
 14a:	77 d1       	rcall	.+750    	; 0x43a <numkey_init>
 14c:	0f c1       	rjmp	.+542    	; 0x36c <lcd_init>
 14e:	08 95       	ret

00000150 <output_msg>:
 *	p_str1: pointer to first character of the string.
 *	p_str2: pointer to first character of the string.
 *  delay_after_msg: number of seconds to wait after message is shown.
 */
void output_msg(char *p_str1, char *p_str2, uint8_t delay_after_msg)
{
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	7c 01       	movw	r14, r24
 15c:	8b 01       	movw	r16, r22
 15e:	c4 2f       	mov	r28, r20
	lcd_set_cursor_mode(CURSOR_OFF);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	ff d0       	rcall	.+510    	; 0x362 <lcd_set_cursor_mode>
	lcd_clear();
 164:	f8 d0       	rcall	.+496    	; 0x356 <lcd_clear>
	lcd_write_str(p_str1);
 166:	c7 01       	movw	r24, r14
 168:	2e d1       	rcall	.+604    	; 0x3c6 <lcd_write_str>
	lcd_set_cursor_pos(1, 0);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	22 d1       	rcall	.+580    	; 0x3b4 <lcd_set_cursor_pos>
	lcd_write_str(p_str2);
 170:	c8 01       	movw	r24, r16
 172:	29 d1       	rcall	.+594    	; 0x3c6 <lcd_write_str>
	if (delay_after_msg > 0)
 174:	cc 23       	and	r28, r28
 176:	11 f0       	breq	.+4      	; 0x17c <output_msg+0x2c>
	{
		delay_1_s(delay_after_msg);	
 178:	8c 2f       	mov	r24, r28
 17a:	de df       	rcall	.-68     	; 0x138 <delay_1_s>
 17c:	cf 91       	pop	r28
	}
	
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	ff 90       	pop	r15
 184:	ef 90       	pop	r14
 186:	08 95       	ret

00000188 <main>:
	uint32_t key;
	char temp_str[17];
	
int main(void)
{
	lcd_init();
 188:	f1 d0       	rcall	.+482    	; 0x36c <lcd_init>
	hmi_init();
 18a:	df df       	rcall	.-66     	; 0x14a <hmi_init>
	regulator_init();
 18c:	9c d1       	rcall	.+824    	; 0x4c6 <regulator_init>
 18e:	2b d1       	rcall	.+598    	; 0x3e6 <motor_init>
	motor_init();
 190:	60 e0       	ldi	r22, 0x00	; 0

	lcd_set_cursor_pos(0, 0);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0f d1       	rcall	.+542    	; 0x3b4 <lcd_set_cursor_pos>
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	69 e1       	ldi	r22, 0x19	; 25
	output_msg("Welcome","",1);
 19a:	71 e0       	ldi	r23, 0x01	; 1
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	d7 df       	rcall	.-82     	; 0x150 <output_msg>
 1a2:	0f 2e       	mov	r0, r31
 1a4:	f5 e2       	ldi	r31, 0x25	; 37
				next_state = motor_off;
			}
			break;
			
			case motor_on:
			sprintf(temp_str, "%u%c", getpotentval(), 0x25);
 1a6:	ff 2e       	mov	r15, r31
 1a8:	f0 2d       	mov	r31, r0
 1aa:	0a e0       	ldi	r16, 0x0A	; 10
 1ac:	11 e0       	ldi	r17, 0x01	; 1
 1ae:	c2 e4       	ldi	r28, 0x42	; 66
 1b0:	d1 e0       	ldi	r29, 0x01	; 1
 1b2:	dd 24       	eor	r13, r13
				next_state = motor_running;
			} else if (key == '1')
			{
				next_state = motor_off;
			}else{
				next_state = motor_on;
 1b4:	d3 94       	inc	r13
 1b6:	68 94       	set
			sprintf(temp_str, "%u%c", getpotentval(), 0x25);
			output_msg("Motor on:", temp_str,0);
			motor_set_speed(getpotentval());
			if (getpotentval()>0)
			{
				next_state = motor_running;
 1b8:	ee 24       	eor	r14, r14
 1ba:	e1 f8       	bld	r14, 1
 1bc:	42 d1       	rcall	.+644    	; 0x442 <numkey_read>
	lcd_set_cursor_pos(0, 0);
	output_msg("Welcome","",1);
	
	while (1)
	{	
		key = numkey_read();
 1be:	08 2e       	mov	r0, r24
 1c0:	00 0c       	add	r0, r0
 1c2:	99 0b       	sbc	r25, r25
 1c4:	aa 0b       	sbc	r26, r26
 1c6:	bb 0b       	sbc	r27, r27
 1c8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <key>
 1cc:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <key+0x1>
 1d0:	a0 93 55 01 	sts	0x0155, r26	; 0x800155 <key+0x2>
 1d4:	b0 93 56 01 	sts	0x0156, r27	; 0x800156 <key+0x3>
 1d8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
		switch(current_state){
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	99 f1       	breq	.+102    	; 0x246 <main+0xbe>
 1e0:	20 f0       	brcs	.+8      	; 0x1ea <main+0x62>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <main+0x60>
 1e6:	61 c0       	rjmp	.+194    	; 0x2aa <main+0x122>
 1e8:	8b c0       	rjmp	.+278    	; 0x300 <main+0x178>
 1ea:	8d d1       	rcall	.+794    	; 0x506 <getpotentval>
			case motor_off:
			sprintf(temp_str, "%u%c", getpotentval(), 0x25);
 1ec:	1f 92       	push	r1
 1ee:	ff 92       	push	r15
 1f0:	1f 92       	push	r1
 1f2:	8f 93       	push	r24
 1f4:	1f 93       	push	r17
 1f6:	0f 93       	push	r16
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	a7 d1       	rcall	.+846    	; 0x54c <sprintf>
			output_msg("Motor off:", temp_str,0);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	be 01       	movw	r22, r28
 202:	8f e0       	ldi	r24, 0x0F	; 15
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	a4 df       	rcall	.-184    	; 0x150 <output_msg>
 208:	80 e0       	ldi	r24, 0x00	; 0
			motor_set_speed(0);
 20a:	00 d1       	rcall	.+512    	; 0x40c <motor_set_speed>
 20c:	8d b7       	in	r24, 0x3d	; 61
 20e:	9e b7       	in	r25, 0x3e	; 62
			if (key=='2' && getpotentval()==0)
 210:	08 96       	adiw	r24, 0x08	; 8
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	9e bf       	out	0x3e, r25	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	8d bf       	out	0x3d, r24	; 61
 21c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <key>
 220:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <key+0x1>
 224:	a0 91 55 01 	lds	r26, 0x0155	; 0x800155 <key+0x2>
 228:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <key+0x3>
 22c:	c2 97       	sbiw	r24, 0x32	; 50
 22e:	a1 05       	cpc	r26, r1
 230:	b1 05       	cpc	r27, r1
 232:	31 f4       	brne	.+12     	; 0x240 <main+0xb8>
 234:	68 d1       	rcall	.+720    	; 0x506 <getpotentval>
 236:	81 11       	cpse	r24, r1
 238:	03 c0       	rjmp	.+6      	; 0x240 <main+0xb8>
 23a:	d0 92 41 01 	sts	0x0141, r13	; 0x800141 <next_state>
			{
				next_state = motor_on;
 23e:	60 c0       	rjmp	.+192    	; 0x300 <main+0x178>
 240:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <next_state>
			}else{
				next_state = motor_off;
 244:	5d c0       	rjmp	.+186    	; 0x300 <main+0x178>
			}
			break;
			
			case motor_on:
			sprintf(temp_str, "%u%c", getpotentval(), 0x25);
 246:	5f d1       	rcall	.+702    	; 0x506 <getpotentval>
 248:	1f 92       	push	r1
 24a:	ff 92       	push	r15
 24c:	1f 92       	push	r1
 24e:	8f 93       	push	r24
 250:	1f 93       	push	r17
 252:	0f 93       	push	r16
 254:	df 93       	push	r29
			output_msg("Motor on:", temp_str,0);
 256:	cf 93       	push	r28
 258:	79 d1       	rcall	.+754    	; 0x54c <sprintf>
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	be 01       	movw	r22, r28
 25e:	8a e1       	ldi	r24, 0x1A	; 26
 260:	91 e0       	ldi	r25, 0x01	; 1
			motor_set_speed(getpotentval());
 262:	76 df       	rcall	.-276    	; 0x150 <output_msg>
 264:	50 d1       	rcall	.+672    	; 0x506 <getpotentval>
 266:	d2 d0       	rcall	.+420    	; 0x40c <motor_set_speed>
 268:	4e d1       	rcall	.+668    	; 0x506 <getpotentval>
			if (getpotentval()>0)
 26a:	2d b7       	in	r18, 0x3d	; 61
 26c:	3e b7       	in	r19, 0x3e	; 62
 26e:	28 5f       	subi	r18, 0xF8	; 248
 270:	3f 4f       	sbci	r19, 0xFF	; 255
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	3e bf       	out	0x3e, r19	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	2d bf       	out	0x3d, r18	; 61
 27c:	88 23       	and	r24, r24
 27e:	19 f0       	breq	.+6      	; 0x286 <main+0xfe>
 280:	e0 92 41 01 	sts	0x0141, r14	; 0x800141 <next_state>
			{
				next_state = motor_running;
 284:	3d c0       	rjmp	.+122    	; 0x300 <main+0x178>
 286:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <key>
			} else if (key == '1')
 28a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <key+0x1>
 28e:	a0 91 55 01 	lds	r26, 0x0155	; 0x800155 <key+0x2>
 292:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <key+0x3>
 296:	c1 97       	sbiw	r24, 0x31	; 49
 298:	a1 05       	cpc	r26, r1
 29a:	b1 05       	cpc	r27, r1
 29c:	19 f4       	brne	.+6      	; 0x2a4 <main+0x11c>
			{
				next_state = motor_off;
 29e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <next_state>
			}else{
				next_state = motor_on;
 2a2:	2e c0       	rjmp	.+92     	; 0x300 <main+0x178>
			}
			break;
			
			case motor_running:
			sprintf(temp_str, "%u%c", getpotentval(), 0x25);
 2a4:	d0 92 41 01 	sts	0x0141, r13	; 0x800141 <next_state>
 2a8:	2b c0       	rjmp	.+86     	; 0x300 <main+0x178>
 2aa:	2d d1       	rcall	.+602    	; 0x506 <getpotentval>
 2ac:	1f 92       	push	r1
 2ae:	ff 92       	push	r15
 2b0:	1f 92       	push	r1
 2b2:	8f 93       	push	r24
 2b4:	1f 93       	push	r17
 2b6:	0f 93       	push	r16
 2b8:	df 93       	push	r29
 2ba:	cf 93       	push	r28
			output_msg("Motor running:", temp_str,0);
 2bc:	47 d1       	rcall	.+654    	; 0x54c <sprintf>
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	be 01       	movw	r22, r28
 2c2:	84 e2       	ldi	r24, 0x24	; 36
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	44 df       	rcall	.-376    	; 0x150 <output_msg>
			motor_set_speed(getpotentval());
 2c8:	1e d1       	rcall	.+572    	; 0x506 <getpotentval>
 2ca:	a0 d0       	rcall	.+320    	; 0x40c <motor_set_speed>
 2cc:	2d b7       	in	r18, 0x3d	; 61
 2ce:	3e b7       	in	r19, 0x3e	; 62
			if (key == '1')
 2d0:	28 5f       	subi	r18, 0xF8	; 248
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	3e bf       	out	0x3e, r19	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	2d bf       	out	0x3d, r18	; 61
 2de:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <key>
 2e2:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <key+0x1>
 2e6:	a0 91 55 01 	lds	r26, 0x0155	; 0x800155 <key+0x2>
 2ea:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <key+0x3>
 2ee:	c1 97       	sbiw	r24, 0x31	; 49
 2f0:	a1 05       	cpc	r26, r1
 2f2:	b1 05       	cpc	r27, r1
 2f4:	19 f4       	brne	.+6      	; 0x2fc <main+0x174>
 2f6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <next_state>
			{
				next_state = motor_off;
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <main+0x178>
 2fc:	e0 92 41 01 	sts	0x0141, r14	; 0x800141 <next_state>
			} else{
				next_state = motor_running;
 300:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <next_state>
			}
			break;
		}
		current_state = next_state;	
 304:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
 308:	59 cf       	rjmp	.-334    	; 0x1bc <main+0x34>

0000030a <write_4bit_msb>:
 *	data: 4 bits of data
 */
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);	
 30a:	91 b3       	in	r25, 0x11	; 17
 30c:	9f 70       	andi	r25, 0x0F	; 15
 30e:	80 7f       	andi	r24, 0xF0	; 240
 310:	89 2b       	or	r24, r25
 312:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 314:	8b b1       	in	r24, 0x0b	; 11
 316:	80 68       	ori	r24, 0x80	; 128
 318:	8b b9       	out	0x0b, r24	; 11
 31a:	8b b9       	out	0x0b, r24	; 11
	delay_1_micros();
 31c:	e3 de       	rcall	.-570    	; 0xe4 <delay_1_micros>
	CLR_BIT(PORTD, 7);
 31e:	8b b1       	in	r24, 0x0b	; 11
 320:	8f 77       	andi	r24, 0x7F	; 127
 322:	8b b9       	out	0x0b, r24	; 11
 324:	8b b9       	out	0x0b, r24	; 11
 326:	08 95       	ret

00000328 <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Instruction or Data register)
 *	data: 8-bit instruction or data (character)
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 328:	cf 93       	push	r28
 32a:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 32c:	81 11       	cpse	r24, r1
 32e:	05 c0       	rjmp	.+10     	; 0x33a <lcd_write+0x12>
		CLR_BIT(PORTD, 6);	// Instruction Register
 330:	8b b1       	in	r24, 0x0b	; 11
 332:	8f 7b       	andi	r24, 0xBF	; 191
 334:	8b b9       	out	0x0b, r24	; 11
 336:	8b b9       	out	0x0b, r24	; 11
 338:	04 c0       	rjmp	.+8      	; 0x342 <lcd_write+0x1a>
	} else {
		SET_BIT(PORTD, 6);	// Data Register
 33a:	8b b1       	in	r24, 0x0b	; 11
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	8b b9       	out	0x0b, r24	; 11
 340:	8b b9       	out	0x0b, r24	; 11
	}
	// write data
	write_4bit_msb(data);
 342:	8c 2f       	mov	r24, r28
 344:	e2 df       	rcall	.-60     	; 0x30a <write_4bit_msb>
	write_4bit_msb(data << 4);
 346:	8c 2f       	mov	r24, r28
 348:	82 95       	swap	r24
 34a:	80 7f       	andi	r24, 0xF0	; 240
 34c:	de df       	rcall	.-68     	; 0x30a <write_4bit_msb>
	delay_micros(45);
 34e:	8d e2       	ldi	r24, 0x2D	; 45
 350:	d6 de       	rcall	.-596    	; 0xfe <delay_micros>
 352:	cf 91       	pop	r28
}
 354:	08 95       	ret

00000356 <lcd_clear>:
 356:	61 e0       	ldi	r22, 0x01	; 1
/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	e6 df       	rcall	.-52     	; 0x328 <lcd_write>
	delay_ms(2);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	df ce       	rjmp	.-578    	; 0x11e <delay_ms>
 360:	08 95       	ret

00000362 <lcd_set_cursor_mode>:
 */
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
	lcd_write(INSTRUCTION, cursor_mode);
 362:	68 2f       	mov	r22, r24
 364:	6c 60       	ori	r22, 0x0C	; 12
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	df cf       	rjmp	.-66     	; 0x328 <lcd_write>
 36a:	08 95       	ret

0000036c <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 36c:	80 ef       	ldi	r24, 0xF0	; 240
 36e:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 370:	80 ec       	ldi	r24, 0xC0	; 192
 372:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 374:	84 e1       	ldi	r24, 0x14	; 20
 376:	d3 de       	rcall	.-602    	; 0x11e <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 378:	8b b1       	in	r24, 0x0b	; 11
 37a:	8f 7b       	andi	r24, 0xBF	; 191
 37c:	8b b9       	out	0x0b, r24	; 11
 37e:	8b b9       	out	0x0b, r24	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	c3 df       	rcall	.-122    	; 0x30a <write_4bit_msb>
	delay_ms(10);
 384:	8a e0       	ldi	r24, 0x0A	; 10
 386:	cb de       	rcall	.-618    	; 0x11e <delay_ms>
	write_4bit_msb(0x30);
 388:	80 e3       	ldi	r24, 0x30	; 48
 38a:	bf df       	rcall	.-130    	; 0x30a <write_4bit_msb>
	delay_ms(10);
 38c:	8a e0       	ldi	r24, 0x0A	; 10
 38e:	c7 de       	rcall	.-626    	; 0x11e <delay_ms>
	write_4bit_msb(0x30);
 390:	80 e3       	ldi	r24, 0x30	; 48
 392:	bb df       	rcall	.-138    	; 0x30a <write_4bit_msb>
	delay_ms(10);
 394:	8a e0       	ldi	r24, 0x0A	; 10
 396:	c3 de       	rcall	.-634    	; 0x11e <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 398:	80 e2       	ldi	r24, 0x20	; 32
 39a:	b7 df       	rcall	.-146    	; 0x30a <write_4bit_msb>
	delay_micros(45);
 39c:	8d e2       	ldi	r24, 0x2D	; 45
 39e:	af de       	rcall	.-674    	; 0xfe <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);		
 3a0:	68 e2       	ldi	r22, 0x28	; 40
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	c1 df       	rcall	.-126    	; 0x328 <lcd_write>
 3a6:	80 e0       	ldi	r24, 0x00	; 0

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_OFF);
 3a8:	dc df       	rcall	.-72     	; 0x362 <lcd_set_cursor_mode>
 3aa:	d5 df       	rcall	.-86     	; 0x356 <lcd_clear>
 3ac:	66 e0       	ldi	r22, 0x06	; 6

	// clear display
	lcd_clear();
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	bb cf       	rjmp	.-138    	; 0x328 <lcd_write>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 3b2:	08 95       	ret

000003b4 <lcd_set_cursor_pos>:
 3b4:	20 e4       	ldi	r18, 0x40	; 64
 3b6:	82 9f       	mul	r24, r18
 3b8:	c0 01       	movw	r24, r0
 3ba:	11 24       	eor	r1, r1
 */
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	uint8_t cursor_pos;
	cursor_pos = 0x80 | (row << 6) | col;
	lcd_write(INSTRUCTION, cursor_pos);
 3bc:	60 68       	ori	r22, 0x80	; 128
 3be:	68 2b       	or	r22, r24
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	b2 cf       	rjmp	.-156    	; 0x328 <lcd_write>
 3c4:	08 95       	ret

000003c6 <lcd_write_str>:
 *
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str)
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
	while(*p_str != '\0'){
 3ca:	fc 01       	movw	r30, r24
 3cc:	60 81       	ld	r22, Z
 3ce:	66 23       	and	r22, r22
 3d0:	39 f0       	breq	.+14     	; 0x3e0 <lcd_write_str+0x1a>
 3d2:	ec 01       	movw	r28, r24
 3d4:	21 96       	adiw	r28, 0x01	; 1
		lcd_write(DATA, *p_str);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	a7 df       	rcall	.-178    	; 0x328 <lcd_write>
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str)
{
	while(*p_str != '\0'){
 3da:	69 91       	ld	r22, Y+
 3dc:	61 11       	cpse	r22, r1
 3de:	fb cf       	rjmp	.-10     	; 0x3d6 <lcd_write_str+0x10>
		lcd_write(DATA, *p_str);
		p_str++;
	}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <motor_init>:
	Use the timers found on the AtMega32U4
*/
uint16_t motorspeed;

void motor_init(void){
	DDRC |= (1 << PORTC6);  // set PC6 (digital pin 5) as output
 3e6:	3e 9a       	sbi	0x07, 6	; 7
	TCCR3A |= (1<<COM3A1);  // Set OC3A (PC6) to be cleared on Compare Match 
 3e8:	e0 e9       	ldi	r30, 0x90	; 144
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	80 83       	st	Z, r24
	                        //(Channel A)	
	TCCR3A |= (1<<WGM32)|(1<<WGM30);  // Waveform Generation Mode 5, Fast PWM (8-bit)
 3f2:	80 81       	ld	r24, Z
 3f4:	89 60       	ori	r24, 0x09	; 9
 3f6:	80 83       	st	Z, r24
//	TCCR3B |= 0;
	OCR3A = 0;
 3f8:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 3fc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	TCCR3B |= (1<<CS31)|(1<<CS30);          // Timer Clock, 16/64 MHz = 1/4 MHz
 400:	e1 e9       	ldi	r30, 0x91	; 145
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	83 60       	ori	r24, 0x03	; 3
 408:	80 83       	st	Z, r24
 40a:	08 95       	ret

0000040c <motor_set_speed>:
}

void motor_set_speed(uint8_t speed){
	 motorspeed = speed * 255;

	motorspeed = motorspeed / 100;
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	82 9f       	mul	r24, r18
 410:	c0 01       	movw	r24, r0
 412:	11 24       	eor	r1, r1
 414:	9c 01       	movw	r18, r24
 416:	36 95       	lsr	r19
 418:	27 95       	ror	r18
 41a:	36 95       	lsr	r19
 41c:	27 95       	ror	r18
 41e:	ab e7       	ldi	r26, 0x7B	; 123
 420:	b4 e1       	ldi	r27, 0x14	; 20
 422:	85 d0       	rcall	.+266    	; 0x52e <__umulhisi3>
 424:	96 95       	lsr	r25
 426:	87 95       	ror	r24
 428:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <motorspeed+0x1>
 42c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <motorspeed>
	OCR3A = motorspeed;
 430:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 434:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 438:	08 95       	ret

0000043a <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 43a:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 43c:	80 ef       	ldi	r24, 0xF0	; 240
 43e:	84 b9       	out	0x04, r24	; 4
 440:	08 95       	ret

00000442 <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	c0 e0       	ldi	r28, 0x00	; 0
 44c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t	i;
	for (i = 0; i < 12; i++) {
		SET_BIT_LEVELS(PORTB, 0b00001111, i<<4);
 44e:	85 b1       	in	r24, 0x05	; 5
 450:	28 2f       	mov	r18, r24
 452:	2f 70       	andi	r18, 0x0F	; 15
 454:	ce 01       	movw	r24, r28
 456:	82 95       	swap	r24
 458:	92 95       	swap	r25
 45a:	90 7f       	andi	r25, 0xF0	; 240
 45c:	98 27       	eor	r25, r24
 45e:	80 7f       	andi	r24, 0xF0	; 240
 460:	98 27       	eor	r25, r24
 462:	82 2b       	or	r24, r18
 464:	85 b9       	out	0x05, r24	; 5
		delay_ms(1);
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	5a de       	rcall	.-844    	; 0x11e <delay_ms>
		// if key was pressed...
		if (PINE & 0b01000000) {	// UPPGIFT: skriv om det logiska uttrycket i if-satsen, så att uttrycket blir sant om bit 6 i PINE är 1.
 46a:	66 9b       	sbis	0x0c, 6	; 12
 46c:	05 c0       	rjmp	.+10     	; 0x478 <numkey_read+0x36>
			return key_map[i];
 46e:	fe 01       	movw	r30, r28
 470:	ed 5c       	subi	r30, 0xCD	; 205
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	80 81       	ld	r24, Z
 476:	05 c0       	rjmp	.+10     	; 0x482 <numkey_read+0x40>
 478:	21 96       	adiw	r28, 0x01	; 1
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
	uint8_t	i;
	for (i = 0; i < 12; i++) {
 47a:	cc 30       	cpi	r28, 0x0C	; 12
 47c:	d1 05       	cpc	r29, r1
 47e:	39 f7       	brne	.-50     	; 0x44e <numkey_read+0xc>
		if (PINE & 0b01000000) {	// UPPGIFT: skriv om det logiska uttrycket i if-satsen, så att uttrycket blir sant om bit 6 i PINE är 1.
			return key_map[i];
		}
	}
	// no key was pressed!
	return NO_KEY;
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <__vector_29>:
/*
 * Interrupt Service Routine for the ADC.
 * The ISR will execute when a A/D conversion is complete.
 */
ISR(ADC_vect)
{
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	2f 93       	push	r18
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
	// read ADC value
			unsigned char low,high;
			low = ADCL;
 49c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			high = ADCH; 		// UPPGIFT: Läs in ADC-värdet. Börja med att läsa av det "låga" registret, därefter det "höga" registret!
 4a0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			adc = (high<<8) + low;
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	98 2f       	mov	r25, r24
 4a8:	88 27       	eor	r24, r24
 4aa:	82 0f       	add	r24, r18
 4ac:	91 1d       	adc	r25, r1
 4ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <regulator_init>:
 * Initialize the ADC and ISR.
 */
void regulator_init(void)
{
	// UPPGIFT: konfigurera ADC-enheten genom ställa in ADMUX och ADCSRA enligt kommentarerna nedanför!
	ADMUX |= (1<<REFS0);		// set reference voltage (internal 5V)
 4c6:	ec e7       	ldi	r30, 0x7C	; 124
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	80 64       	ori	r24, 0x40	; 64
 4ce:	80 83       	st	Z, r24
	ADMUX |= 0b00000001;					// select diff.amp 10x on ADC0 & ADC1
 4d0:	80 81       	ld	r24, Z
 4d2:	81 60       	ori	r24, 0x01	; 1
 4d4:	80 83       	st	Z, r24
								// right adjustment of ADC value
	
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) ;				// prescaler 128
 4d6:	ea e7       	ldi	r30, 0x7A	; 122
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	87 60       	ori	r24, 0x07	; 7
 4de:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADATE;		// enable Auto Trigger
 4e0:	80 81       	ld	r24, Z
 4e2:	80 62       	ori	r24, 0x20	; 32
 4e4:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADIE;		// enable Interrupt
 4e6:	80 81       	ld	r24, Z
 4e8:	88 60       	ori	r24, 0x08	; 8
 4ea:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADEN;		// enable ADC
 4ec:	80 81       	ld	r24, Z
 4ee:	80 68       	ori	r24, 0x80	; 128
 4f0:	80 83       	st	Z, r24

	// disable digital input on ADC0 and ADC1
	DIDR0 = 3;
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		
	// disable USB controller (to make interrupts possible)
	USBCON = 0;	
 4f8:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	// enable global interrupts
	sei();
 4fc:	78 94       	sei

	// start initial conversion
	ADCSRA |= (1<<ADSC);	// UPPGIFT: gör så att den initiala A/D-omvandlingen sker
 4fe:	80 81       	ld	r24, Z
 500:	80 64       	ori	r24, 0x40	; 64
 502:	80 83       	st	Z, r24
 504:	08 95       	ret

00000506 <getpotentval>:
}


uint8_t getpotentval(void)
{
	uint16_t temp = adc; //adc returns interval between 0 - 1023
 506:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 50a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
	temp = (temp - 23) / 10;
 50e:	27 51       	subi	r18, 0x17	; 23
 510:	31 09       	sbc	r19, r1
 512:	ad ec       	ldi	r26, 0xCD	; 205
 514:	bc ec       	ldi	r27, 0xCC	; 204
 516:	0b d0       	rcall	.+22     	; 0x52e <__umulhisi3>
 518:	96 95       	lsr	r25
 51a:	87 95       	ror	r24
 51c:	96 95       	lsr	r25
 51e:	87 95       	ror	r24
 520:	96 95       	lsr	r25
 522:	87 95       	ror	r24
	if (temp <= 100 && temp >= 0)
 524:	85 36       	cpi	r24, 0x65	; 101
 526:	91 05       	cpc	r25, r1
 528:	08 f0       	brcs	.+2      	; 0x52c <getpotentval+0x26>
	{
		return temp;
	}
	return 0;
 52a:	80 e0       	ldi	r24, 0x00	; 0
}
 52c:	08 95       	ret

0000052e <__umulhisi3>:
 52e:	a2 9f       	mul	r26, r18
 530:	b0 01       	movw	r22, r0
 532:	b3 9f       	mul	r27, r19
 534:	c0 01       	movw	r24, r0
 536:	a3 9f       	mul	r26, r19
 538:	70 0d       	add	r23, r0
 53a:	81 1d       	adc	r24, r1
 53c:	11 24       	eor	r1, r1
 53e:	91 1d       	adc	r25, r1
 540:	b2 9f       	mul	r27, r18
 542:	70 0d       	add	r23, r0
 544:	81 1d       	adc	r24, r1
 546:	11 24       	eor	r1, r1
 548:	91 1d       	adc	r25, r1
 54a:	08 95       	ret

0000054c <sprintf>:
 54c:	ae e0       	ldi	r26, 0x0E	; 14
 54e:	b0 e0       	ldi	r27, 0x00	; 0
 550:	eb ea       	ldi	r30, 0xAB	; 171
 552:	f2 e0       	ldi	r31, 0x02	; 2
 554:	aa c2       	rjmp	.+1364   	; 0xaaa <__prologue_saves__+0x1c>
 556:	0d 89       	ldd	r16, Y+21	; 0x15
 558:	1e 89       	ldd	r17, Y+22	; 0x16
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	8c 83       	std	Y+4, r24	; 0x04
 55e:	1a 83       	std	Y+2, r17	; 0x02
 560:	09 83       	std	Y+1, r16	; 0x01
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	9f e7       	ldi	r25, 0x7F	; 127
 566:	9e 83       	std	Y+6, r25	; 0x06
 568:	8d 83       	std	Y+5, r24	; 0x05
 56a:	ae 01       	movw	r20, r28
 56c:	47 5e       	subi	r20, 0xE7	; 231
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	6f 89       	ldd	r22, Y+23	; 0x17
 572:	78 8d       	ldd	r23, Y+24	; 0x18
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	08 d0       	rcall	.+16     	; 0x58a <vfprintf>
 57a:	ef 81       	ldd	r30, Y+7	; 0x07
 57c:	f8 85       	ldd	r31, Y+8	; 0x08
 57e:	e0 0f       	add	r30, r16
 580:	f1 1f       	adc	r31, r17
 582:	10 82       	st	Z, r1
 584:	2e 96       	adiw	r28, 0x0e	; 14
 586:	e4 e0       	ldi	r30, 0x04	; 4
 588:	ac c2       	rjmp	.+1368   	; 0xae2 <__epilogue_restores__+0x1c>

0000058a <vfprintf>:
 58a:	ab e0       	ldi	r26, 0x0B	; 11
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	ea ec       	ldi	r30, 0xCA	; 202
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	7d c2       	rjmp	.+1274   	; 0xa8e <__prologue_saves__>
 594:	6c 01       	movw	r12, r24
 596:	7b 01       	movw	r14, r22
 598:	8a 01       	movw	r16, r20
 59a:	fc 01       	movw	r30, r24
 59c:	17 82       	std	Z+7, r1	; 0x07
 59e:	16 82       	std	Z+6, r1	; 0x06
 5a0:	83 81       	ldd	r24, Z+3	; 0x03
 5a2:	81 ff       	sbrs	r24, 1
 5a4:	bf c1       	rjmp	.+894    	; 0x924 <vfprintf+0x39a>
 5a6:	ce 01       	movw	r24, r28
 5a8:	01 96       	adiw	r24, 0x01	; 1
 5aa:	3c 01       	movw	r6, r24
 5ac:	f6 01       	movw	r30, r12
 5ae:	93 81       	ldd	r25, Z+3	; 0x03
 5b0:	f7 01       	movw	r30, r14
 5b2:	93 fd       	sbrc	r25, 3
 5b4:	85 91       	lpm	r24, Z+
 5b6:	93 ff       	sbrs	r25, 3
 5b8:	81 91       	ld	r24, Z+
 5ba:	7f 01       	movw	r14, r30
 5bc:	88 23       	and	r24, r24
 5be:	09 f4       	brne	.+2      	; 0x5c2 <vfprintf+0x38>
 5c0:	ad c1       	rjmp	.+858    	; 0x91c <vfprintf+0x392>
 5c2:	85 32       	cpi	r24, 0x25	; 37
 5c4:	39 f4       	brne	.+14     	; 0x5d4 <vfprintf+0x4a>
 5c6:	93 fd       	sbrc	r25, 3
 5c8:	85 91       	lpm	r24, Z+
 5ca:	93 ff       	sbrs	r25, 3
 5cc:	81 91       	ld	r24, Z+
 5ce:	7f 01       	movw	r14, r30
 5d0:	85 32       	cpi	r24, 0x25	; 37
 5d2:	21 f4       	brne	.+8      	; 0x5dc <vfprintf+0x52>
 5d4:	b6 01       	movw	r22, r12
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	c0 d1       	rcall	.+896    	; 0x95a <fputc>
 5da:	e8 cf       	rjmp	.-48     	; 0x5ac <vfprintf+0x22>
 5dc:	91 2c       	mov	r9, r1
 5de:	21 2c       	mov	r2, r1
 5e0:	31 2c       	mov	r3, r1
 5e2:	ff e1       	ldi	r31, 0x1F	; 31
 5e4:	f3 15       	cp	r31, r3
 5e6:	d8 f0       	brcs	.+54     	; 0x61e <vfprintf+0x94>
 5e8:	8b 32       	cpi	r24, 0x2B	; 43
 5ea:	79 f0       	breq	.+30     	; 0x60a <vfprintf+0x80>
 5ec:	38 f4       	brcc	.+14     	; 0x5fc <vfprintf+0x72>
 5ee:	80 32       	cpi	r24, 0x20	; 32
 5f0:	79 f0       	breq	.+30     	; 0x610 <vfprintf+0x86>
 5f2:	83 32       	cpi	r24, 0x23	; 35
 5f4:	a1 f4       	brne	.+40     	; 0x61e <vfprintf+0x94>
 5f6:	23 2d       	mov	r18, r3
 5f8:	20 61       	ori	r18, 0x10	; 16
 5fa:	1d c0       	rjmp	.+58     	; 0x636 <vfprintf+0xac>
 5fc:	8d 32       	cpi	r24, 0x2D	; 45
 5fe:	61 f0       	breq	.+24     	; 0x618 <vfprintf+0x8e>
 600:	80 33       	cpi	r24, 0x30	; 48
 602:	69 f4       	brne	.+26     	; 0x61e <vfprintf+0x94>
 604:	23 2d       	mov	r18, r3
 606:	21 60       	ori	r18, 0x01	; 1
 608:	16 c0       	rjmp	.+44     	; 0x636 <vfprintf+0xac>
 60a:	83 2d       	mov	r24, r3
 60c:	82 60       	ori	r24, 0x02	; 2
 60e:	38 2e       	mov	r3, r24
 610:	e3 2d       	mov	r30, r3
 612:	e4 60       	ori	r30, 0x04	; 4
 614:	3e 2e       	mov	r3, r30
 616:	2a c0       	rjmp	.+84     	; 0x66c <vfprintf+0xe2>
 618:	f3 2d       	mov	r31, r3
 61a:	f8 60       	ori	r31, 0x08	; 8
 61c:	1d c0       	rjmp	.+58     	; 0x658 <vfprintf+0xce>
 61e:	37 fc       	sbrc	r3, 7
 620:	2d c0       	rjmp	.+90     	; 0x67c <vfprintf+0xf2>
 622:	20 ed       	ldi	r18, 0xD0	; 208
 624:	28 0f       	add	r18, r24
 626:	2a 30       	cpi	r18, 0x0A	; 10
 628:	40 f0       	brcs	.+16     	; 0x63a <vfprintf+0xb0>
 62a:	8e 32       	cpi	r24, 0x2E	; 46
 62c:	b9 f4       	brne	.+46     	; 0x65c <vfprintf+0xd2>
 62e:	36 fc       	sbrc	r3, 6
 630:	75 c1       	rjmp	.+746    	; 0x91c <vfprintf+0x392>
 632:	23 2d       	mov	r18, r3
 634:	20 64       	ori	r18, 0x40	; 64
 636:	32 2e       	mov	r3, r18
 638:	19 c0       	rjmp	.+50     	; 0x66c <vfprintf+0xe2>
 63a:	36 fe       	sbrs	r3, 6
 63c:	06 c0       	rjmp	.+12     	; 0x64a <vfprintf+0xc0>
 63e:	8a e0       	ldi	r24, 0x0A	; 10
 640:	98 9e       	mul	r9, r24
 642:	20 0d       	add	r18, r0
 644:	11 24       	eor	r1, r1
 646:	92 2e       	mov	r9, r18
 648:	11 c0       	rjmp	.+34     	; 0x66c <vfprintf+0xe2>
 64a:	ea e0       	ldi	r30, 0x0A	; 10
 64c:	2e 9e       	mul	r2, r30
 64e:	20 0d       	add	r18, r0
 650:	11 24       	eor	r1, r1
 652:	22 2e       	mov	r2, r18
 654:	f3 2d       	mov	r31, r3
 656:	f0 62       	ori	r31, 0x20	; 32
 658:	3f 2e       	mov	r3, r31
 65a:	08 c0       	rjmp	.+16     	; 0x66c <vfprintf+0xe2>
 65c:	8c 36       	cpi	r24, 0x6C	; 108
 65e:	21 f4       	brne	.+8      	; 0x668 <vfprintf+0xde>
 660:	83 2d       	mov	r24, r3
 662:	80 68       	ori	r24, 0x80	; 128
 664:	38 2e       	mov	r3, r24
 666:	02 c0       	rjmp	.+4      	; 0x66c <vfprintf+0xe2>
 668:	88 36       	cpi	r24, 0x68	; 104
 66a:	41 f4       	brne	.+16     	; 0x67c <vfprintf+0xf2>
 66c:	f7 01       	movw	r30, r14
 66e:	93 fd       	sbrc	r25, 3
 670:	85 91       	lpm	r24, Z+
 672:	93 ff       	sbrs	r25, 3
 674:	81 91       	ld	r24, Z+
 676:	7f 01       	movw	r14, r30
 678:	81 11       	cpse	r24, r1
 67a:	b3 cf       	rjmp	.-154    	; 0x5e2 <vfprintf+0x58>
 67c:	98 2f       	mov	r25, r24
 67e:	9f 7d       	andi	r25, 0xDF	; 223
 680:	95 54       	subi	r25, 0x45	; 69
 682:	93 30       	cpi	r25, 0x03	; 3
 684:	28 f4       	brcc	.+10     	; 0x690 <vfprintf+0x106>
 686:	0c 5f       	subi	r16, 0xFC	; 252
 688:	1f 4f       	sbci	r17, 0xFF	; 255
 68a:	9f e3       	ldi	r25, 0x3F	; 63
 68c:	99 83       	std	Y+1, r25	; 0x01
 68e:	0d c0       	rjmp	.+26     	; 0x6aa <vfprintf+0x120>
 690:	83 36       	cpi	r24, 0x63	; 99
 692:	31 f0       	breq	.+12     	; 0x6a0 <vfprintf+0x116>
 694:	83 37       	cpi	r24, 0x73	; 115
 696:	71 f0       	breq	.+28     	; 0x6b4 <vfprintf+0x12a>
 698:	83 35       	cpi	r24, 0x53	; 83
 69a:	09 f0       	breq	.+2      	; 0x69e <vfprintf+0x114>
 69c:	55 c0       	rjmp	.+170    	; 0x748 <vfprintf+0x1be>
 69e:	20 c0       	rjmp	.+64     	; 0x6e0 <vfprintf+0x156>
 6a0:	f8 01       	movw	r30, r16
 6a2:	80 81       	ld	r24, Z
 6a4:	89 83       	std	Y+1, r24	; 0x01
 6a6:	0e 5f       	subi	r16, 0xFE	; 254
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	88 24       	eor	r8, r8
 6ac:	83 94       	inc	r8
 6ae:	91 2c       	mov	r9, r1
 6b0:	53 01       	movw	r10, r6
 6b2:	12 c0       	rjmp	.+36     	; 0x6d8 <vfprintf+0x14e>
 6b4:	28 01       	movw	r4, r16
 6b6:	f2 e0       	ldi	r31, 0x02	; 2
 6b8:	4f 0e       	add	r4, r31
 6ba:	51 1c       	adc	r5, r1
 6bc:	f8 01       	movw	r30, r16
 6be:	a0 80       	ld	r10, Z
 6c0:	b1 80       	ldd	r11, Z+1	; 0x01
 6c2:	36 fe       	sbrs	r3, 6
 6c4:	03 c0       	rjmp	.+6      	; 0x6cc <vfprintf+0x142>
 6c6:	69 2d       	mov	r22, r9
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <vfprintf+0x146>
 6cc:	6f ef       	ldi	r22, 0xFF	; 255
 6ce:	7f ef       	ldi	r23, 0xFF	; 255
 6d0:	c5 01       	movw	r24, r10
 6d2:	38 d1       	rcall	.+624    	; 0x944 <strnlen>
 6d4:	4c 01       	movw	r8, r24
 6d6:	82 01       	movw	r16, r4
 6d8:	f3 2d       	mov	r31, r3
 6da:	ff 77       	andi	r31, 0x7F	; 127
 6dc:	3f 2e       	mov	r3, r31
 6de:	15 c0       	rjmp	.+42     	; 0x70a <vfprintf+0x180>
 6e0:	28 01       	movw	r4, r16
 6e2:	22 e0       	ldi	r18, 0x02	; 2
 6e4:	42 0e       	add	r4, r18
 6e6:	51 1c       	adc	r5, r1
 6e8:	f8 01       	movw	r30, r16
 6ea:	a0 80       	ld	r10, Z
 6ec:	b1 80       	ldd	r11, Z+1	; 0x01
 6ee:	36 fe       	sbrs	r3, 6
 6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <vfprintf+0x16e>
 6f2:	69 2d       	mov	r22, r9
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <vfprintf+0x172>
 6f8:	6f ef       	ldi	r22, 0xFF	; 255
 6fa:	7f ef       	ldi	r23, 0xFF	; 255
 6fc:	c5 01       	movw	r24, r10
 6fe:	17 d1       	rcall	.+558    	; 0x92e <strnlen_P>
 700:	4c 01       	movw	r8, r24
 702:	f3 2d       	mov	r31, r3
 704:	f0 68       	ori	r31, 0x80	; 128
 706:	3f 2e       	mov	r3, r31
 708:	82 01       	movw	r16, r4
 70a:	33 fc       	sbrc	r3, 3
 70c:	19 c0       	rjmp	.+50     	; 0x740 <vfprintf+0x1b6>
 70e:	82 2d       	mov	r24, r2
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	88 16       	cp	r8, r24
 714:	99 06       	cpc	r9, r25
 716:	a0 f4       	brcc	.+40     	; 0x740 <vfprintf+0x1b6>
 718:	b6 01       	movw	r22, r12
 71a:	80 e2       	ldi	r24, 0x20	; 32
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	1d d1       	rcall	.+570    	; 0x95a <fputc>
 720:	2a 94       	dec	r2
 722:	f5 cf       	rjmp	.-22     	; 0x70e <vfprintf+0x184>
 724:	f5 01       	movw	r30, r10
 726:	37 fc       	sbrc	r3, 7
 728:	85 91       	lpm	r24, Z+
 72a:	37 fe       	sbrs	r3, 7
 72c:	81 91       	ld	r24, Z+
 72e:	5f 01       	movw	r10, r30
 730:	b6 01       	movw	r22, r12
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	12 d1       	rcall	.+548    	; 0x95a <fputc>
 736:	21 10       	cpse	r2, r1
 738:	2a 94       	dec	r2
 73a:	21 e0       	ldi	r18, 0x01	; 1
 73c:	82 1a       	sub	r8, r18
 73e:	91 08       	sbc	r9, r1
 740:	81 14       	cp	r8, r1
 742:	91 04       	cpc	r9, r1
 744:	79 f7       	brne	.-34     	; 0x724 <vfprintf+0x19a>
 746:	e1 c0       	rjmp	.+450    	; 0x90a <vfprintf+0x380>
 748:	84 36       	cpi	r24, 0x64	; 100
 74a:	11 f0       	breq	.+4      	; 0x750 <vfprintf+0x1c6>
 74c:	89 36       	cpi	r24, 0x69	; 105
 74e:	39 f5       	brne	.+78     	; 0x79e <vfprintf+0x214>
 750:	f8 01       	movw	r30, r16
 752:	37 fe       	sbrs	r3, 7
 754:	07 c0       	rjmp	.+14     	; 0x764 <vfprintf+0x1da>
 756:	60 81       	ld	r22, Z
 758:	71 81       	ldd	r23, Z+1	; 0x01
 75a:	82 81       	ldd	r24, Z+2	; 0x02
 75c:	93 81       	ldd	r25, Z+3	; 0x03
 75e:	0c 5f       	subi	r16, 0xFC	; 252
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	08 c0       	rjmp	.+16     	; 0x774 <vfprintf+0x1ea>
 764:	60 81       	ld	r22, Z
 766:	71 81       	ldd	r23, Z+1	; 0x01
 768:	07 2e       	mov	r0, r23
 76a:	00 0c       	add	r0, r0
 76c:	88 0b       	sbc	r24, r24
 76e:	99 0b       	sbc	r25, r25
 770:	0e 5f       	subi	r16, 0xFE	; 254
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	f3 2d       	mov	r31, r3
 776:	ff 76       	andi	r31, 0x6F	; 111
 778:	3f 2e       	mov	r3, r31
 77a:	97 ff       	sbrs	r25, 7
 77c:	09 c0       	rjmp	.+18     	; 0x790 <vfprintf+0x206>
 77e:	90 95       	com	r25
 780:	80 95       	com	r24
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	f0 68       	ori	r31, 0x80	; 128
 78e:	3f 2e       	mov	r3, r31
 790:	2a e0       	ldi	r18, 0x0A	; 10
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	a3 01       	movw	r20, r6
 796:	1d d1       	rcall	.+570    	; 0x9d2 <__ultoa_invert>
 798:	88 2e       	mov	r8, r24
 79a:	86 18       	sub	r8, r6
 79c:	44 c0       	rjmp	.+136    	; 0x826 <vfprintf+0x29c>
 79e:	85 37       	cpi	r24, 0x75	; 117
 7a0:	31 f4       	brne	.+12     	; 0x7ae <vfprintf+0x224>
 7a2:	23 2d       	mov	r18, r3
 7a4:	2f 7e       	andi	r18, 0xEF	; 239
 7a6:	b2 2e       	mov	r11, r18
 7a8:	2a e0       	ldi	r18, 0x0A	; 10
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	25 c0       	rjmp	.+74     	; 0x7f8 <vfprintf+0x26e>
 7ae:	93 2d       	mov	r25, r3
 7b0:	99 7f       	andi	r25, 0xF9	; 249
 7b2:	b9 2e       	mov	r11, r25
 7b4:	8f 36       	cpi	r24, 0x6F	; 111
 7b6:	c1 f0       	breq	.+48     	; 0x7e8 <vfprintf+0x25e>
 7b8:	18 f4       	brcc	.+6      	; 0x7c0 <vfprintf+0x236>
 7ba:	88 35       	cpi	r24, 0x58	; 88
 7bc:	79 f0       	breq	.+30     	; 0x7dc <vfprintf+0x252>
 7be:	ae c0       	rjmp	.+348    	; 0x91c <vfprintf+0x392>
 7c0:	80 37       	cpi	r24, 0x70	; 112
 7c2:	19 f0       	breq	.+6      	; 0x7ca <vfprintf+0x240>
 7c4:	88 37       	cpi	r24, 0x78	; 120
 7c6:	21 f0       	breq	.+8      	; 0x7d0 <vfprintf+0x246>
 7c8:	a9 c0       	rjmp	.+338    	; 0x91c <vfprintf+0x392>
 7ca:	e9 2f       	mov	r30, r25
 7cc:	e0 61       	ori	r30, 0x10	; 16
 7ce:	be 2e       	mov	r11, r30
 7d0:	b4 fe       	sbrs	r11, 4
 7d2:	0d c0       	rjmp	.+26     	; 0x7ee <vfprintf+0x264>
 7d4:	fb 2d       	mov	r31, r11
 7d6:	f4 60       	ori	r31, 0x04	; 4
 7d8:	bf 2e       	mov	r11, r31
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <vfprintf+0x264>
 7dc:	34 fe       	sbrs	r3, 4
 7de:	0a c0       	rjmp	.+20     	; 0x7f4 <vfprintf+0x26a>
 7e0:	29 2f       	mov	r18, r25
 7e2:	26 60       	ori	r18, 0x06	; 6
 7e4:	b2 2e       	mov	r11, r18
 7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <vfprintf+0x26a>
 7e8:	28 e0       	ldi	r18, 0x08	; 8
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <vfprintf+0x26e>
 7ee:	20 e1       	ldi	r18, 0x10	; 16
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x26e>
 7f4:	20 e1       	ldi	r18, 0x10	; 16
 7f6:	32 e0       	ldi	r19, 0x02	; 2
 7f8:	f8 01       	movw	r30, r16
 7fa:	b7 fe       	sbrs	r11, 7
 7fc:	07 c0       	rjmp	.+14     	; 0x80c <vfprintf+0x282>
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	82 81       	ldd	r24, Z+2	; 0x02
 804:	93 81       	ldd	r25, Z+3	; 0x03
 806:	0c 5f       	subi	r16, 0xFC	; 252
 808:	1f 4f       	sbci	r17, 0xFF	; 255
 80a:	06 c0       	rjmp	.+12     	; 0x818 <vfprintf+0x28e>
 80c:	60 81       	ld	r22, Z
 80e:	71 81       	ldd	r23, Z+1	; 0x01
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 5f       	subi	r16, 0xFE	; 254
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	a3 01       	movw	r20, r6
 81a:	db d0       	rcall	.+438    	; 0x9d2 <__ultoa_invert>
 81c:	88 2e       	mov	r8, r24
 81e:	86 18       	sub	r8, r6
 820:	fb 2d       	mov	r31, r11
 822:	ff 77       	andi	r31, 0x7F	; 127
 824:	3f 2e       	mov	r3, r31
 826:	36 fe       	sbrs	r3, 6
 828:	0d c0       	rjmp	.+26     	; 0x844 <vfprintf+0x2ba>
 82a:	23 2d       	mov	r18, r3
 82c:	2e 7f       	andi	r18, 0xFE	; 254
 82e:	a2 2e       	mov	r10, r18
 830:	89 14       	cp	r8, r9
 832:	58 f4       	brcc	.+22     	; 0x84a <vfprintf+0x2c0>
 834:	34 fe       	sbrs	r3, 4
 836:	0b c0       	rjmp	.+22     	; 0x84e <vfprintf+0x2c4>
 838:	32 fc       	sbrc	r3, 2
 83a:	09 c0       	rjmp	.+18     	; 0x84e <vfprintf+0x2c4>
 83c:	83 2d       	mov	r24, r3
 83e:	8e 7e       	andi	r24, 0xEE	; 238
 840:	a8 2e       	mov	r10, r24
 842:	05 c0       	rjmp	.+10     	; 0x84e <vfprintf+0x2c4>
 844:	b8 2c       	mov	r11, r8
 846:	a3 2c       	mov	r10, r3
 848:	03 c0       	rjmp	.+6      	; 0x850 <vfprintf+0x2c6>
 84a:	b8 2c       	mov	r11, r8
 84c:	01 c0       	rjmp	.+2      	; 0x850 <vfprintf+0x2c6>
 84e:	b9 2c       	mov	r11, r9
 850:	a4 fe       	sbrs	r10, 4
 852:	0f c0       	rjmp	.+30     	; 0x872 <vfprintf+0x2e8>
 854:	fe 01       	movw	r30, r28
 856:	e8 0d       	add	r30, r8
 858:	f1 1d       	adc	r31, r1
 85a:	80 81       	ld	r24, Z
 85c:	80 33       	cpi	r24, 0x30	; 48
 85e:	21 f4       	brne	.+8      	; 0x868 <vfprintf+0x2de>
 860:	9a 2d       	mov	r25, r10
 862:	99 7e       	andi	r25, 0xE9	; 233
 864:	a9 2e       	mov	r10, r25
 866:	09 c0       	rjmp	.+18     	; 0x87a <vfprintf+0x2f0>
 868:	a2 fe       	sbrs	r10, 2
 86a:	06 c0       	rjmp	.+12     	; 0x878 <vfprintf+0x2ee>
 86c:	b3 94       	inc	r11
 86e:	b3 94       	inc	r11
 870:	04 c0       	rjmp	.+8      	; 0x87a <vfprintf+0x2f0>
 872:	8a 2d       	mov	r24, r10
 874:	86 78       	andi	r24, 0x86	; 134
 876:	09 f0       	breq	.+2      	; 0x87a <vfprintf+0x2f0>
 878:	b3 94       	inc	r11
 87a:	a3 fc       	sbrc	r10, 3
 87c:	10 c0       	rjmp	.+32     	; 0x89e <vfprintf+0x314>
 87e:	a0 fe       	sbrs	r10, 0
 880:	06 c0       	rjmp	.+12     	; 0x88e <vfprintf+0x304>
 882:	b2 14       	cp	r11, r2
 884:	80 f4       	brcc	.+32     	; 0x8a6 <vfprintf+0x31c>
 886:	28 0c       	add	r2, r8
 888:	92 2c       	mov	r9, r2
 88a:	9b 18       	sub	r9, r11
 88c:	0d c0       	rjmp	.+26     	; 0x8a8 <vfprintf+0x31e>
 88e:	b2 14       	cp	r11, r2
 890:	58 f4       	brcc	.+22     	; 0x8a8 <vfprintf+0x31e>
 892:	b6 01       	movw	r22, r12
 894:	80 e2       	ldi	r24, 0x20	; 32
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	60 d0       	rcall	.+192    	; 0x95a <fputc>
 89a:	b3 94       	inc	r11
 89c:	f8 cf       	rjmp	.-16     	; 0x88e <vfprintf+0x304>
 89e:	b2 14       	cp	r11, r2
 8a0:	18 f4       	brcc	.+6      	; 0x8a8 <vfprintf+0x31e>
 8a2:	2b 18       	sub	r2, r11
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <vfprintf+0x320>
 8a6:	98 2c       	mov	r9, r8
 8a8:	21 2c       	mov	r2, r1
 8aa:	a4 fe       	sbrs	r10, 4
 8ac:	0f c0       	rjmp	.+30     	; 0x8cc <vfprintf+0x342>
 8ae:	b6 01       	movw	r22, r12
 8b0:	80 e3       	ldi	r24, 0x30	; 48
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	52 d0       	rcall	.+164    	; 0x95a <fputc>
 8b6:	a2 fe       	sbrs	r10, 2
 8b8:	16 c0       	rjmp	.+44     	; 0x8e6 <vfprintf+0x35c>
 8ba:	a1 fc       	sbrc	r10, 1
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <vfprintf+0x33a>
 8be:	88 e7       	ldi	r24, 0x78	; 120
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0x33e>
 8c4:	88 e5       	ldi	r24, 0x58	; 88
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	b6 01       	movw	r22, r12
 8ca:	0c c0       	rjmp	.+24     	; 0x8e4 <vfprintf+0x35a>
 8cc:	8a 2d       	mov	r24, r10
 8ce:	86 78       	andi	r24, 0x86	; 134
 8d0:	51 f0       	breq	.+20     	; 0x8e6 <vfprintf+0x35c>
 8d2:	a1 fe       	sbrs	r10, 1
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <vfprintf+0x350>
 8d6:	8b e2       	ldi	r24, 0x2B	; 43
 8d8:	01 c0       	rjmp	.+2      	; 0x8dc <vfprintf+0x352>
 8da:	80 e2       	ldi	r24, 0x20	; 32
 8dc:	a7 fc       	sbrc	r10, 7
 8de:	8d e2       	ldi	r24, 0x2D	; 45
 8e0:	b6 01       	movw	r22, r12
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	3a d0       	rcall	.+116    	; 0x95a <fputc>
 8e6:	89 14       	cp	r8, r9
 8e8:	30 f4       	brcc	.+12     	; 0x8f6 <vfprintf+0x36c>
 8ea:	b6 01       	movw	r22, r12
 8ec:	80 e3       	ldi	r24, 0x30	; 48
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	34 d0       	rcall	.+104    	; 0x95a <fputc>
 8f2:	9a 94       	dec	r9
 8f4:	f8 cf       	rjmp	.-16     	; 0x8e6 <vfprintf+0x35c>
 8f6:	8a 94       	dec	r8
 8f8:	f3 01       	movw	r30, r6
 8fa:	e8 0d       	add	r30, r8
 8fc:	f1 1d       	adc	r31, r1
 8fe:	80 81       	ld	r24, Z
 900:	b6 01       	movw	r22, r12
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	2a d0       	rcall	.+84     	; 0x95a <fputc>
 906:	81 10       	cpse	r8, r1
 908:	f6 cf       	rjmp	.-20     	; 0x8f6 <vfprintf+0x36c>
 90a:	22 20       	and	r2, r2
 90c:	09 f4       	brne	.+2      	; 0x910 <vfprintf+0x386>
 90e:	4e ce       	rjmp	.-868    	; 0x5ac <vfprintf+0x22>
 910:	b6 01       	movw	r22, r12
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	21 d0       	rcall	.+66     	; 0x95a <fputc>
 918:	2a 94       	dec	r2
 91a:	f7 cf       	rjmp	.-18     	; 0x90a <vfprintf+0x380>
 91c:	f6 01       	movw	r30, r12
 91e:	86 81       	ldd	r24, Z+6	; 0x06
 920:	97 81       	ldd	r25, Z+7	; 0x07
 922:	02 c0       	rjmp	.+4      	; 0x928 <vfprintf+0x39e>
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	2b 96       	adiw	r28, 0x0b	; 11
 92a:	e2 e1       	ldi	r30, 0x12	; 18
 92c:	cc c0       	rjmp	.+408    	; 0xac6 <__epilogue_restores__>

0000092e <strnlen_P>:
 92e:	fc 01       	movw	r30, r24
 930:	05 90       	lpm	r0, Z+
 932:	61 50       	subi	r22, 0x01	; 1
 934:	70 40       	sbci	r23, 0x00	; 0
 936:	01 10       	cpse	r0, r1
 938:	d8 f7       	brcc	.-10     	; 0x930 <strnlen_P+0x2>
 93a:	80 95       	com	r24
 93c:	90 95       	com	r25
 93e:	8e 0f       	add	r24, r30
 940:	9f 1f       	adc	r25, r31
 942:	08 95       	ret

00000944 <strnlen>:
 944:	fc 01       	movw	r30, r24
 946:	61 50       	subi	r22, 0x01	; 1
 948:	70 40       	sbci	r23, 0x00	; 0
 94a:	01 90       	ld	r0, Z+
 94c:	01 10       	cpse	r0, r1
 94e:	d8 f7       	brcc	.-10     	; 0x946 <strnlen+0x2>
 950:	80 95       	com	r24
 952:	90 95       	com	r25
 954:	8e 0f       	add	r24, r30
 956:	9f 1f       	adc	r25, r31
 958:	08 95       	ret

0000095a <fputc>:
 95a:	0f 93       	push	r16
 95c:	1f 93       	push	r17
 95e:	cf 93       	push	r28
 960:	df 93       	push	r29
 962:	fb 01       	movw	r30, r22
 964:	23 81       	ldd	r18, Z+3	; 0x03
 966:	21 fd       	sbrc	r18, 1
 968:	03 c0       	rjmp	.+6      	; 0x970 <fputc+0x16>
 96a:	8f ef       	ldi	r24, 0xFF	; 255
 96c:	9f ef       	ldi	r25, 0xFF	; 255
 96e:	2c c0       	rjmp	.+88     	; 0x9c8 <fputc+0x6e>
 970:	22 ff       	sbrs	r18, 2
 972:	16 c0       	rjmp	.+44     	; 0x9a0 <fputc+0x46>
 974:	46 81       	ldd	r20, Z+6	; 0x06
 976:	57 81       	ldd	r21, Z+7	; 0x07
 978:	24 81       	ldd	r18, Z+4	; 0x04
 97a:	35 81       	ldd	r19, Z+5	; 0x05
 97c:	42 17       	cp	r20, r18
 97e:	53 07       	cpc	r21, r19
 980:	44 f4       	brge	.+16     	; 0x992 <fputc+0x38>
 982:	a0 81       	ld	r26, Z
 984:	b1 81       	ldd	r27, Z+1	; 0x01
 986:	9d 01       	movw	r18, r26
 988:	2f 5f       	subi	r18, 0xFF	; 255
 98a:	3f 4f       	sbci	r19, 0xFF	; 255
 98c:	31 83       	std	Z+1, r19	; 0x01
 98e:	20 83       	st	Z, r18
 990:	8c 93       	st	X, r24
 992:	26 81       	ldd	r18, Z+6	; 0x06
 994:	37 81       	ldd	r19, Z+7	; 0x07
 996:	2f 5f       	subi	r18, 0xFF	; 255
 998:	3f 4f       	sbci	r19, 0xFF	; 255
 99a:	37 83       	std	Z+7, r19	; 0x07
 99c:	26 83       	std	Z+6, r18	; 0x06
 99e:	14 c0       	rjmp	.+40     	; 0x9c8 <fputc+0x6e>
 9a0:	8b 01       	movw	r16, r22
 9a2:	ec 01       	movw	r28, r24
 9a4:	fb 01       	movw	r30, r22
 9a6:	00 84       	ldd	r0, Z+8	; 0x08
 9a8:	f1 85       	ldd	r31, Z+9	; 0x09
 9aa:	e0 2d       	mov	r30, r0
 9ac:	09 95       	icall
 9ae:	89 2b       	or	r24, r25
 9b0:	e1 f6       	brne	.-72     	; 0x96a <fputc+0x10>
 9b2:	d8 01       	movw	r26, r16
 9b4:	16 96       	adiw	r26, 0x06	; 6
 9b6:	8d 91       	ld	r24, X+
 9b8:	9c 91       	ld	r25, X
 9ba:	17 97       	sbiw	r26, 0x07	; 7
 9bc:	01 96       	adiw	r24, 0x01	; 1
 9be:	17 96       	adiw	r26, 0x07	; 7
 9c0:	9c 93       	st	X, r25
 9c2:	8e 93       	st	-X, r24
 9c4:	16 97       	sbiw	r26, 0x06	; 6
 9c6:	ce 01       	movw	r24, r28
 9c8:	df 91       	pop	r29
 9ca:	cf 91       	pop	r28
 9cc:	1f 91       	pop	r17
 9ce:	0f 91       	pop	r16
 9d0:	08 95       	ret

000009d2 <__ultoa_invert>:
 9d2:	fa 01       	movw	r30, r20
 9d4:	aa 27       	eor	r26, r26
 9d6:	28 30       	cpi	r18, 0x08	; 8
 9d8:	51 f1       	breq	.+84     	; 0xa2e <__ultoa_invert+0x5c>
 9da:	20 31       	cpi	r18, 0x10	; 16
 9dc:	81 f1       	breq	.+96     	; 0xa3e <__ultoa_invert+0x6c>
 9de:	e8 94       	clt
 9e0:	6f 93       	push	r22
 9e2:	6e 7f       	andi	r22, 0xFE	; 254
 9e4:	6e 5f       	subi	r22, 0xFE	; 254
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	af 4f       	sbci	r26, 0xFF	; 255
 9ee:	b1 e0       	ldi	r27, 0x01	; 1
 9f0:	3e d0       	rcall	.+124    	; 0xa6e <__ultoa_invert+0x9c>
 9f2:	b4 e0       	ldi	r27, 0x04	; 4
 9f4:	3c d0       	rcall	.+120    	; 0xa6e <__ultoa_invert+0x9c>
 9f6:	67 0f       	add	r22, r23
 9f8:	78 1f       	adc	r23, r24
 9fa:	89 1f       	adc	r24, r25
 9fc:	9a 1f       	adc	r25, r26
 9fe:	a1 1d       	adc	r26, r1
 a00:	68 0f       	add	r22, r24
 a02:	79 1f       	adc	r23, r25
 a04:	8a 1f       	adc	r24, r26
 a06:	91 1d       	adc	r25, r1
 a08:	a1 1d       	adc	r26, r1
 a0a:	6a 0f       	add	r22, r26
 a0c:	71 1d       	adc	r23, r1
 a0e:	81 1d       	adc	r24, r1
 a10:	91 1d       	adc	r25, r1
 a12:	a1 1d       	adc	r26, r1
 a14:	20 d0       	rcall	.+64     	; 0xa56 <__ultoa_invert+0x84>
 a16:	09 f4       	brne	.+2      	; 0xa1a <__ultoa_invert+0x48>
 a18:	68 94       	set
 a1a:	3f 91       	pop	r19
 a1c:	2a e0       	ldi	r18, 0x0A	; 10
 a1e:	26 9f       	mul	r18, r22
 a20:	11 24       	eor	r1, r1
 a22:	30 19       	sub	r19, r0
 a24:	30 5d       	subi	r19, 0xD0	; 208
 a26:	31 93       	st	Z+, r19
 a28:	de f6       	brtc	.-74     	; 0x9e0 <__ultoa_invert+0xe>
 a2a:	cf 01       	movw	r24, r30
 a2c:	08 95       	ret
 a2e:	46 2f       	mov	r20, r22
 a30:	47 70       	andi	r20, 0x07	; 7
 a32:	40 5d       	subi	r20, 0xD0	; 208
 a34:	41 93       	st	Z+, r20
 a36:	b3 e0       	ldi	r27, 0x03	; 3
 a38:	0f d0       	rcall	.+30     	; 0xa58 <__ultoa_invert+0x86>
 a3a:	c9 f7       	brne	.-14     	; 0xa2e <__ultoa_invert+0x5c>
 a3c:	f6 cf       	rjmp	.-20     	; 0xa2a <__ultoa_invert+0x58>
 a3e:	46 2f       	mov	r20, r22
 a40:	4f 70       	andi	r20, 0x0F	; 15
 a42:	40 5d       	subi	r20, 0xD0	; 208
 a44:	4a 33       	cpi	r20, 0x3A	; 58
 a46:	18 f0       	brcs	.+6      	; 0xa4e <__ultoa_invert+0x7c>
 a48:	49 5d       	subi	r20, 0xD9	; 217
 a4a:	31 fd       	sbrc	r19, 1
 a4c:	40 52       	subi	r20, 0x20	; 32
 a4e:	41 93       	st	Z+, r20
 a50:	02 d0       	rcall	.+4      	; 0xa56 <__ultoa_invert+0x84>
 a52:	a9 f7       	brne	.-22     	; 0xa3e <__ultoa_invert+0x6c>
 a54:	ea cf       	rjmp	.-44     	; 0xa2a <__ultoa_invert+0x58>
 a56:	b4 e0       	ldi	r27, 0x04	; 4
 a58:	a6 95       	lsr	r26
 a5a:	97 95       	ror	r25
 a5c:	87 95       	ror	r24
 a5e:	77 95       	ror	r23
 a60:	67 95       	ror	r22
 a62:	ba 95       	dec	r27
 a64:	c9 f7       	brne	.-14     	; 0xa58 <__ultoa_invert+0x86>
 a66:	00 97       	sbiw	r24, 0x00	; 0
 a68:	61 05       	cpc	r22, r1
 a6a:	71 05       	cpc	r23, r1
 a6c:	08 95       	ret
 a6e:	9b 01       	movw	r18, r22
 a70:	ac 01       	movw	r20, r24
 a72:	0a 2e       	mov	r0, r26
 a74:	06 94       	lsr	r0
 a76:	57 95       	ror	r21
 a78:	47 95       	ror	r20
 a7a:	37 95       	ror	r19
 a7c:	27 95       	ror	r18
 a7e:	ba 95       	dec	r27
 a80:	c9 f7       	brne	.-14     	; 0xa74 <__ultoa_invert+0xa2>
 a82:	62 0f       	add	r22, r18
 a84:	73 1f       	adc	r23, r19
 a86:	84 1f       	adc	r24, r20
 a88:	95 1f       	adc	r25, r21
 a8a:	a0 1d       	adc	r26, r0
 a8c:	08 95       	ret

00000a8e <__prologue_saves__>:
 a8e:	2f 92       	push	r2
 a90:	3f 92       	push	r3
 a92:	4f 92       	push	r4
 a94:	5f 92       	push	r5
 a96:	6f 92       	push	r6
 a98:	7f 92       	push	r7
 a9a:	8f 92       	push	r8
 a9c:	9f 92       	push	r9
 a9e:	af 92       	push	r10
 aa0:	bf 92       	push	r11
 aa2:	cf 92       	push	r12
 aa4:	df 92       	push	r13
 aa6:	ef 92       	push	r14
 aa8:	ff 92       	push	r15
 aaa:	0f 93       	push	r16
 aac:	1f 93       	push	r17
 aae:	cf 93       	push	r28
 ab0:	df 93       	push	r29
 ab2:	cd b7       	in	r28, 0x3d	; 61
 ab4:	de b7       	in	r29, 0x3e	; 62
 ab6:	ca 1b       	sub	r28, r26
 ab8:	db 0b       	sbc	r29, r27
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	f8 94       	cli
 abe:	de bf       	out	0x3e, r29	; 62
 ac0:	0f be       	out	0x3f, r0	; 63
 ac2:	cd bf       	out	0x3d, r28	; 61
 ac4:	09 94       	ijmp

00000ac6 <__epilogue_restores__>:
 ac6:	2a 88       	ldd	r2, Y+18	; 0x12
 ac8:	39 88       	ldd	r3, Y+17	; 0x11
 aca:	48 88       	ldd	r4, Y+16	; 0x10
 acc:	5f 84       	ldd	r5, Y+15	; 0x0f
 ace:	6e 84       	ldd	r6, Y+14	; 0x0e
 ad0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ad2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ad4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ad6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ad8:	b9 84       	ldd	r11, Y+9	; 0x09
 ada:	c8 84       	ldd	r12, Y+8	; 0x08
 adc:	df 80       	ldd	r13, Y+7	; 0x07
 ade:	ee 80       	ldd	r14, Y+6	; 0x06
 ae0:	fd 80       	ldd	r15, Y+5	; 0x05
 ae2:	0c 81       	ldd	r16, Y+4	; 0x04
 ae4:	1b 81       	ldd	r17, Y+3	; 0x03
 ae6:	aa 81       	ldd	r26, Y+2	; 0x02
 ae8:	b9 81       	ldd	r27, Y+1	; 0x01
 aea:	ce 0f       	add	r28, r30
 aec:	d1 1d       	adc	r29, r1
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	f8 94       	cli
 af2:	de bf       	out	0x3e, r29	; 62
 af4:	0f be       	out	0x3f, r0	; 63
 af6:	cd bf       	out	0x3d, r28	; 61
 af8:	ed 01       	movw	r28, r26
 afa:	08 95       	ret

00000afc <_exit>:
 afc:	f8 94       	cli

00000afe <__stop_program>:
 afe:	ff cf       	rjmp	.-2      	; 0xafe <__stop_program>
